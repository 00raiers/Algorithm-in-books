// 编程之美 1.2
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// 中国象棋中将帅分别位于自己的格子内，并且不能照面。
// 假设只有将和帅，那么所有的可能有哪些？
// 要求在代码中只能使用一个字节存储变量
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//                  1 2 3
// “将”（A）的格子  4 5 6
//                  7 8 9
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//                  1 2 3
// “帅”（B）的格子  4 5 6
//                  7 8 9
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// for i <- 1 to 9
// 	for j <- 1 to 9
// 		if (i % 3 != j % 3)
// 			do
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// 此问题的关键在于一个字节存储变量，而i=1:9，j=1:9都只用
// 占用4bit，此时如何用何种方式存储i和j就是关键所在。
// 1. 用BYTE型的0-80，除以9的除数作为i(0:8)，余数作为j(0:8)
// 2. 8bit中的前4bit存i，后4bit存j
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// 2014. 09. 26
// lichao

/*
#include <iostream>

using namespace std;

int main()
{
	for(unsigned char i = 0; i < 81; i++)
	{
		if (i/9 % 3 != i%9 %3)
		{
			cout << "A = " << i/9+1 << " B = " << i%9+1 << endl;
		}
	}
	return 0;
}
*/
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// 此处属于第二种方式的操作，即8bit中的前4bit存i，后4bit存j
// 实现此方式利用了位域操作
/* */

#include <iostream>

using namespace std;

struct BYTE
{
	unsigned char i:4;
	unsigned char j:4;
};

int main()
{
	BYTE a;

	for (a.i = 1; a.i < 10; a.i++)
	{
		for (a.j = 1; a.j < 10; a.j++)
		{
			if (a.i%3 != a.j%3)
			{
				cout << "A = " << int(a.i) << " B = " << int(a.j) << endl;
			}
		}
	}

	return 0;
}